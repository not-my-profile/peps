PEP: 9999
Title: Type stubs for single-file top-level modules
Author: Martin Fischer <martin@push-f.com>
Discussions-To: https://github.com/python/typing/issues/1333
Status: Draft
Type: Standards Track
Content-Type: text/x-rst
Created: 09-Jan-2023
Post-History: 09-Jan-2023
Resolution:


Abstract
========

:pep:`561` established a standard to mark that a package includes
type stubs by creating a ``py.typed`` marker file within the package
directory. This PEP introduces an additional standard to support the
provision of type stubs for single-file top-level modules by simply
creating a file named ``{module}.pyi`` in the site-package directory
(where ``{module}`` denotes the name of the respective top-level
module).


Terminology
===========

There are two types of Python modules:

pure modules
  Are implemented in Python in a single ``.py`` file.

extension modules
  Are written in another language: For example CPython provides the C
  extension API [1]_ allowing Python modules to be written in any
  language that can interface with C and be compiled to a shared library
  file (e.g. an ``.so`` file on Linux or a DLL file with the ``.pyd``
  extension on Windows).


Rationale
=========

:pep:`561` does foresee a way to mark single-file top-level modules as
typed within a distribution package, it only provides a way to mark
packages as typed.

While pure top-level modules can simply be turned into a package by
moving, for example ``example.py`` to ``example/__init__.py`` and
creating the ``example/py.typed`` marker file as per :pep:`561`, this is
not as straight forward for extension modules because the ``__init__``
module of a package always has to be a pure module (so we cannot simply
move e.g. ``example.cpython-36m-x86_64-linux-gnu.so`` to
``example/__init__.cpython-36m-x86_64-linux-gnu.so``).

For top-level extension modules the only standard-compliant workaround
has been to create an ``__init__.py`` file such as the following::

  from ._native import *

  __doc__ = _native.__doc__
  if hasattr(_native, "__all__"):
      __all__ = _native.__all__

assuming a file structure such as::

    mypackage
    ├── __init__.py
    ├── __init__.pyi
    ├── _native.cpython-36m-x86_64-linux-gnu.so
    └── py.typed

While having to create such an re-exporting ``__init__.py`` file
is obviously unintuitive it also comes with two disadvantages:

1. Tools such as documentation generators do not know about this trick.
   So for example pydoc [2]_ will list ``_native`` under PACKAGE
   CONTENTS and ``help(mypackage.example)`` will tell you that
   ``example`` resides in ``mypackage._native``.

2. The ``__file__`` attribute of the module no longer points to the file
   actually implementing the module (e.g. ``mypackage.__file__`` will
   be the ``__index__.py`` file instead of the ``.so`` file).

This PEP therefore introduces the standard that a top-level modules can
be linked to a type stub (``.pyi``) file by simply placing the ``.pyi``
file next to the module, so our previously described file structure
could become::

  mypackage.cpython-36m-x86_64-linux-gnu.so
  mypackage.pyi

According to this PEP the same is also meant to work with pure modules,
for example::

  mypackage.py
  mypackage.pyi

The only remaining scenario where you need to convert a top-level module
into a package in order to use the ``py.typed`` marker file from
:pep:`561` is if you have a pure top-level modules with inline types
(the type annotations are defined directly in the ``.py`` file and there
is no ``.pyi`` file).
This PEP does not provide an alternative mechanism for this scenario
because pure modules do not require an unintuitive re-exporting
``__init__.py`` file and the previously mentioned disadvantages that
come with such an intermediary ``__init__.py`` file therefore do not
apply.


Specification
=============

Type checkers should recognize top-level type stub (``.pyi``) files for
top-level single-file modules (be they pure modules or extension
modules) within the 4th step of the :pep:`module resolution order
defined in PEP 561 <561#type-checker-module-resolution-order>`.
Top-level type stub files have to be named after the module name
directly followed by the ``.pyi`` file extension, in other words the
have to be named ``{module}.pyi`` where ``{module}`` denotes the name of
the respective module.

In the case that both ``{module}.pyi`` as well as
``{module}/__init__.pyi`` and ``{module}/py.typed`` exist type checkers
should prefer the ``{module}/__init__.pyi`` type stub file in the case
that ``{module}/__init__.py`` exists (since the Python ``import``
statement also prefers packages over modules if both exist in the same
directory), otherwise ``{module}.pyi`` should be used.

References
==========
.. [1] Building C and C++ Extensions
   (https://docs.python.org/3/extending/building.html)

.. [2] pydoc
   (https://docs.python.org/3/library/pydoc.html)

Copyright
=========

This document has been placed in the public domain.
